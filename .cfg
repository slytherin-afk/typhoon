program → declaration* EOF ; 
declaration →  funDecl | varDecl | statement ;
funDecl → "function" function ;
function → IDENTIFIER "(" parameters? ")" block ;
parameters → IDENTIFIER ( "," IDENTIFIER )* ;
varDecl → "var" varList ";" ;
varList → IDENTIFIER ( "=" assignment )? ( "," IDENTIFIER ( "=" assignment )? )* ;
statement → exprStmt | ifStmt | printStmt | block | exitStmt | emptyStmt | whileStmt | forStmt | breakStmt;
block → "{" declaration* "}" ;
exprStmt → expression ";" ; 
ifStmt → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt → "print" expression ";" ;
exitStmt → "exit" expression ";" ;
emptyStmt → ";" ;
whileStmt → "while" "(" expression ")" statement ;
forStmt → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
breakStmt → ( "continue" | "break" ) ";" ;

expression → comma ;
comma → assignment ( "," assignment )* ;
assignment → IDENTIFIER "=" assignment | ternary ;
ternary → or ( "?" expression ":" expression )? ;  
or → and ( "or" and)* ;
and → equality ( "and" equality)* ;
equality → comparison ( ( "!=" | "==" ) comparison )* ; 
comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ; 
term → factor ( ( "-" | "+" ) factor )* ; 
factor → unary ( ( "/" | "*" ) unary )* ;
unary → ( "!" | "-" ) unary | call ; 
call → primary ( "(" arguments? ")" )* ;
arguments → expression ( "," expression )* ;
primary → IDENTIFIER | NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;
